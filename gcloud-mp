#!/bin/bash
#
# gcloud-mp(1) is a utility to manage and switch between gcloud projects. 

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

GCLOUDCONF="${HOME}/.config/gcloud"
GCLOUDMP="${GCLOUDCONF}/gcloud-mp"

YELLOW=$(tput setaf 3)
DARKBG=$(tput setab 0)
NORMAL=$(tput sgr0)

usage() {
  cat <<"EOF"
USAGE:
  gcloud-mp                   : list the projects
  gcloud-mp <NAME>            : switch to project <NAME>
  gcloud-mp -                 : switch to the previous project
  gcloud-mp <NEW_NAME>=<NAME> : rename project <NAME> to <NEW_NAME>
  gcloud-mp <NEW_NAME>=.      : rename current-project to <NEW_NAME>
  gcloud-mp -d <NAME>         : delete project <NAME> ('.' for current-project)
                                (this command won't delete the user/cluster entry
                                that is used by the project)

  gcloud-mp -h,--help         : show this message
EOF
  exit 1
}

current_project() {
  gcloud config configurations list --filter="IS_ACTIVE=True" --format="table(name)" | grep -v NAME
}

get_projects() {
   gcloud config configurations list --format="table(name)" | grep -v NAME
}

list_projects() {
  set -u pipefail
  local cur
  cur="$(current_project)"


  for c in $(get_projects); do
  if [[ -t 1 && "${c}" = "${cur}" ]]; then
    echo "${DARKBG}${YELLOW}${c}${NORMAL}"
  else
    echo "${c}"
  fi
  done
}

read_project() {
  if [[ -f "${GCLOUDMP}" ]]; then
    cat "${GCLOUDMP}"
  fi
}

save_project() {
  local saved
  saved="$(read_project)"

  if [[ "${saved}" != "${1}" ]]; then
    printf %s "${1}" > "${GCLOUDMP}"
  fi
}

switch_project() {
  gcloud config configurations activate "${1}"
}

set_project() {
  local prev
  prev="$(current_project)"

  switch_project "${1}"

  if [[ "${prev}" != "${1}" ]]; then
    save_project "${prev}"
  fi
}

swap_project() {
  local ctx
  ctx="$(read_project)"
  if [[ -z "${ctx}" ]]; then
    echo "error: No previous project found." >&2
    exit 1
  fi
  set_project "${ctx}"
}

project_exists() {
  grep -q ^"${1}"\$ <(gcloud config configurations list --format="table(name)" | grep -v NAME)
}

rename_project() {
  local old_name="${1}"
  local new_name="${2}"

  if [[ "${old_name}" == "." ]]; then
    old_name="$(current_project)"
  fi

  if project_exists "${new_name}"; then
    echo "Context \"${new_name}\" exists, deleting..." >&2
    rm -f $GCLOUDCONF/configurations/config_${new_name} 1>/dev/null 2>&1
  fi
  cp $GCLOUDCONF/configurations/config_{${old_name},${new_name}}
  echo "Aliased ${old_name} to ${DARKBG}${YELLOW}${new_name}${NORMAL}"
}

delete_project() {
  local ctx
  ctx="${1}"
  if [[ "${ctx}" == "." ]]; then
    ctx="$(current_project)"
  fi
  echo "Deleting project \"${ctx}\"..." >&2
  gcloud config configurations delete "${ctx}"  
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_projects
  elif [[ "${1}" == "-d" ]]; then
    if [[ "$#" -lt 2 ]]; then
      echo "error: missing project NAME" >&2
      usage
    elif [[ "$#" -gt 2 ]]; then
      echo "error: too many arguments" >&2
      usage
    fi
    delete_project "${2}"
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many arguments" >&2
    usage
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == "-" ]]; then
      swap_project
    elif [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    elif [[ "${1}" =~ (.+)=(.+) ]]; then
      rename_project "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
    else
      set_project "${1}"
    fi
  else
    usage
  fi
}

main "$@"
